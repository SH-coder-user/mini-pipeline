version: "3.9"

services:
  db:
    image: postgres:16
    container_name: mini_pg
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-appuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-apppw}
      POSTGRES_DB: ${POSTGRES_DB:-warehouse}
      TZ: ${TZ:-Asia/Seoul}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-appuser} -d ${POSTGRES_DB:-warehouse}"]
      interval: 5s
      timeout: 3s
      retries: 10

  api:
    build: .
    container_name: mini_api
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      TZ: ${TZ}
      ETL_ROWS: ${ETL_ROWS}
    depends_on:
      db:
        condition: service_healthy
    command: ["uvicorn", "app.api:app", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8000:8000"

  web:
    build: .
    container_name: mini_web
    environment:
      API_URL: "http://api:8000"
      TZ: ${TZ}
    depends_on:
      - api
    command: ["streamlit", "run", "app/streamlit_app.py", "--server.port=8501", "--server.address=0.0.0.0"]
    ports:
      - "8501:8501"

  scheduler:
    build: .
    container_name: mini_scheduler
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      TZ: ${TZ}
      ETL_ROWS: ${ETL_ROWS}
      SCHEDULE_CRON: ${SCHEDULE_CRON}
    depends_on:
      db:
        condition: service_healthy
    command: ["python", "app/scheduler.py"]

volumes:
  pgdata:

